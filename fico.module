<?php

/**
 * @file
 * Contains fico.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_help().
 */
function fico_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.fico':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Adds conditional functionality to fields.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 */
function fico_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, $form, FormStateInterface $form_state) {
  $fieldStorage = $field_definition->getFieldStorageDefinition();
  $settings = $plugin->getThirdPartySetting('fico', 'fico');
  $settings['entity_type'] = $form['#entity_type'];
  $settings['bundle'] = $form['#bundle'];
  $settings['field_name'] = $fieldStorage->getName();
  $settings['field_type'] = $fieldStorage->getType();

  $element = array();

  $element['fico'] = [
    '#type' => 'details',
    '#title' => t('Conditions'),
  ];

  $context = array(
    'instance' => $field_definition,
    'formatter' => $plugin,
    'settings' => $settings,
  );

  fico_condition_settings_form($element, $form_state, $context);

  return $element;
}

/**
 * Field template settings form.
 *
 * @param array $form
 *   The form array.
 * @param object $form_state
 *   The form_state object.
 * @param array $context
 *   The context array.
 */
function fico_condition_settings_form(&$form, &$form_state, $context) {
  $conditions = fico_field_options($context['instance']);
  $settings = $context['settings'];
  $default_field_function = !empty($settings['condition']) ? $settings['condition'] : NULL;
  $key = is_array($context['instance']) ? $context['instance']['field_name'] : $context['instance']->getName();
  $values = $form_state->getValues();

  if (isset($values['fields'][$key]['settings_edit_form']['third_party_settings']['fico']['fico']['condition'])) {
    $field_function = $values['fields'][$key]['settings_edit_form']['third_party_settings']['fico']['fico']['condition'];
  }
  else {
    $field_function = $default_field_function;
  }

  $form['fico']['#open'] = $field_function ? TRUE : FALSE;

  $form['fico']['condition'] = [
    '#title' => t('Condition'),
    '#empty_option' => t('- Select a condition -'),
    '#type' => 'select',
    '#options' => $conditions,
    '#default_value' => $field_function ? $field_function : [],
    '#submit' => array('fico_ajax_submit'),
    '#ajax' => array(
      'callback' => 'fico_ajax_callback',
      'wrapper' => 'field-display-overview-wrapper',
    ),
  ];

  $config = isset($context['settings']) ? $context['settings'] : array();
  $formatterPlugin = $field_function ? \Drupal::service('plugin.manager.field_formatter_condition')->createInstance($field_function, $config) : NULL;

  $form['fico']['settings'] = [
    '#type' => 'container',
    '#attributes' => [
      'id' => 'fico-settings',
    ],
  ];

  if ($formatterPlugin) {
    $formatterPlugin->alterForm($form['fico']['settings'], $settings);
  }
}

/**
 * Ajax handler for changing conditions.
 */
function fico_ajax_callback(array $form, FormStateInterface &$form_state) {
  return $form['fields'];
}

/**
 * Form submission handler for changing conditions.
 */
function fico_ajax_submit(array $form, FormStateInterface &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function fico_field_formatter_settings_summary_alter(&$summary, $context) {
  $fico_plugin_manager = Drupal::service('plugin.manager.field_formatter_condition');
  $conditions = [];
  foreach ($fico_plugin_manager->getPlugins() as $plug) {
    $conditions[$plug['id']] = $plug['label'];
  }
  $settings = $context['formatter']->getThirdPartySetting('fico', 'fico');
  $settings['view_mode'] = $context['view_mode'];
  if (is_object($context['field_definition']) && method_exists($context['field_definition'], 'get')) {
    $settings['field_type'] = $context['field_definition']->get('field_type');
    $settings['field_type'] = $context['field_definition']->get('field_type');
    $settings['field_name'] = $context['field_definition']->get('field_name');
    $settings['entity_type'] = $context['field_definition']->get('entity_type');
    $settings['bundle'] = $context['field_definition']->get('bundle');
  }
  if (!empty($settings['condition'])) {
    $formatterPlugin = $fico_plugin_manager->createInstance($settings['condition']);
    $summary[] = $formatterPlugin->summary($settings);
  }
  else {
    $summary[] = t("Condition: %condition", [
      "%condition" => t('not set'),
    ]);
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function fico_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $components = $display->getComponents();
  foreach ($components as $field => $component) {
    if (!empty($component['third_party_settings']['fico']['fico']['condition'])) {
      $settings = [
        'condition' => $component['third_party_settings']['fico']['fico']['condition'],
        'entity_type' => $entity->getEntityTypeId(),
        'bundle' => $entity->bundle(),
        'settings' => !empty($component['third_party_settings']['fico']['fico']['settings']) ? $component['third_party_settings']['fico']['fico']['settings'] : NULL,
        'field_name' => $field,
        'field_type' => $component['type'],
      ];
      $fico_plugin_manager = Drupal::service('plugin.manager.field_formatter_condition');
      $formatterPlugin = $fico_plugin_manager->createInstance($settings['condition']);
      $formatterPlugin->access($build, $field, $settings);
    }
  }
}

/**
 * Search a string in a field..
 *
 * @param array $build
 *   The current build array.
 * @param string $field
 *   The current field name.
 * @param array $settings
 *   The current settings array.
 */
function fico_string_search(&$build, $field, $settings) {
  $prefix = $settings['condition'];
  if (!empty($settings['settings'][$prefix . '_target_field']) && !empty($build[$settings['settings'][$prefix . '_target_field']]['#items'])) {
    $target = $build[$settings['settings'][$prefix . '_target_field']]['#items'];
    $values = $target->getValue($field);
    $found = FALSE;
    $options = [
      'found' => &$found,
      'string' => $settings['settings'][$prefix . '_string'],
    ];
    array_walk($values, function (&$item, $delta, $options) {
      if (!empty($item['value']) && strpos($item['value'], $options['string']) !== FALSE) {
        $options['found'] = TRUE;
      }
    }, $options);

    return $found;
  }
}

/**
 * Gets all Field Formatter Condition options.
 *
 * @param object $field_definition
 *   The field definition object.
 *
 * @return array
 *   List of conditions.
 */
function fico_field_options($field_definition) {
  $options = array();
  foreach (\Drupal::service('plugin.manager.field_formatter_condition')->getDefinitions() as $plugin_id => $plugin) {
    if (in_array($field_definition->getType(), $plugin['types']) || in_array('all', $plugin['types'])) {
      $options[$plugin_id] = $plugin['label'];
    }
  }
  return $options;
}

/**
 * Gets all allowed text format types.
 *
 * @return array
 *   List of allowed text format types.
 */
function fico_text_types() {
  return [
    "text",
    "text_long",
    "text_with_summary",
    "string",
    "list_string",
    "string_long",
  ];
}
